#!/usr/local/bin/perl

use 5.010;

use strict;
use warnings FATAL => 'all';
#use diagnostics;

use Data::Dump;
#use Carp qw();

$|=1;
################################################################################
use autodie;

my $DISPLAY_TOP  = 20;
my $MAX_NAME_LEN = 12;
my $SCORES_FILE  = "$ENV{HOME}/.cpan-scores";

my %current_score_of  = get_new();
my %previous_score_of = get_prev();
my %users = map {
    $_ => 1
} keys %current_score_of, keys %previous_score_of;
my %delta_for = map {
    my $c = $current_score_of{$_}  // 0;
    my $p = $previous_score_of{$_} // 0;
    $_ => $c - $p
} keys %users;

for ( sort { ($current_score_of{$b}//0) <=> ($current_score_of{$a}//0) } keys %users ) {
    state $pos;
    printf "%2d) %-*s %7s%+d\n",
      ++$pos, $MAX_NAME_LEN, $_, commify($current_score_of{$_}), $delta_for{$_};
    last if $pos >= $DISPLAY_TOP;
}

write_current(%current_score_of);

exit;

sub write_current {
    my %s = @_;

    open my $OUT, ">", $SCORES_FILE;
    for (sort {lc $a cmp lc $b} keys %s) {
        say $OUT "$_ => $s{$_}";
    }
}

sub get_prev {
    return () unless -e $SCORES_FILE;

    my %p;
    open my $IN, "<", $SCORES_FILE;
    while (<$IN>) {
        my ($n, $s) = split /\s*=>\s*/;
        $p{$n} = $s;
    }
    return %p;
}

sub get_new {
    say "Paste new data now...";
    my @top = split /, /, <>;

    my %score_of;
    for (@top) {
        my ($score, $name) = /\[(\d+)\]\s+(.*)/;
        $name = $1 if $name =~ /\((.*?)\)/;
        $name = truncate_str($MAX_NAME_LEN, $name);
        $score_of{$name} = $score;
    }
    return %score_of;
}

sub truncate_str {
    my ($len, $str) = @_;

    substr $str, $len-3, 9999, "..."
          if length $str > $len;
    s/^\s+//, s/\s+$// for $str;
    return $str;
}

sub commify { # perlfaq4
    local $_  = shift;
    1 while s/^([-+]?\d+)(\d{3})/$1,$2/;
    return $_;
}
